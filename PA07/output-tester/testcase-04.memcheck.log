==569== Memcheck, a memory error detector
==569== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==569== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==569== Command: ./a.out images/bmps/04-unnormalized-nelsonmandela.bmp --normalize student-out-03_04-nelsonmandela.bmp
==569== Parent PID: 567
==569== 
--569-- 
--569-- Valgrind options:
--569--    --tool=memcheck
--569--    --leak-check=full
--569--    --verbose
--569--    --log-file=memcheck-03.log
--569-- Contents of /proc/version:
--569--   Linux version 2.6.32-431.23.3.el6.x86_64 (mockbuild@x86-027.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Wed Jul 16 06:12:23 EDT 2014
--569-- Arch and hwcaps: AMD64, amd64-sse3-cx16
--569-- Page sizes: currently 4096, max supported 4096
--569-- Valgrind library directory: /usr/lib64/valgrind
--569-- Reading syms from /tmp/.eu3jWQ/a.out
--569-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--569--    object doesn't have a dynamic symbol table
--569-- Reading syms from /lib64/ld-2.12.so
--569--   Considering /usr/lib/debug/.build-id/3b/fa45bce0e82e1d90d37a0cc8630f97f2003bf5.debug ..
--569--   .. build-id is valid
--569-- Scheduler: using generic scheduler lock implementation.
--569-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==569== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-569-by-patel344-on-ecegrid-thin3.ecn.purdue.edu
==569== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-569-by-patel344-on-ecegrid-thin3.ecn.purdue.edu
==569== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-569-by-patel344-on-ecegrid-thin3.ecn.purdue.edu
==569== 
==569== TO CONTROL THIS PROCESS USING vgdb (which you probably
==569== don't want to do, unless you know exactly what you're doing,
==569== or are doing some strange experiment):
==569==   /usr/lib64/valgrind/../../bin/vgdb --pid=569 ...command...
==569== 
==569== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==569==   /path/to/gdb ./a.out
==569== and then give GDB the following command
==569==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=569
==569== --pid is optional if only one valgrind process is running
==569== 
--569-- REDIR: 0x3968617610 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--569-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--569-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--569-- REDIR: 0x3968617480 (index) redirected to 0x4a07c30 (index)
--569-- REDIR: 0x3968617500 (strcmp) redirected to 0x4a08570 (strcmp)
--569-- Reading syms from /lib64/libc-2.12.so
--569--   Considering /usr/lib/debug/.build-id/73/3ad3a438b5a695f7a63a77413f9b2c8c94e8e6.debug ..
--569--   .. build-id is valid
--569-- REDIR: 0x3968a84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--569-- REDIR: 0x3968a86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--569-- REDIR: 0x3968a82c40 (__GI_strrchr) redirected to 0x4a07ab0 (__GI_strrchr)
--569-- REDIR: 0x3968a7f6e0 (strcmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--569-- REDIR: 0x3968b28420 (__strcmp_sse42) redirected to 0x4a084d0 (strcmp)
--569-- REDIR: 0x3968a81120 (strlen) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--569-- REDIR: 0x3968b336f0 (__strlen_sse42) redirected to 0x4a07f90 (strlen)
--569-- REDIR: 0x3968a8aaf0 (strchrnul) redirected to 0x4a09fb0 (strchrnul)
--569-- REDIR: 0x3968a84500 (mempcpy) redirected to 0x4a0a020 (mempcpy)
--569-- REDIR: 0x3968a7b520 (free) redirected to 0x4a063a9 (free)
--569-- REDIR: 0x3968a7a640 (malloc) redirected to 0x4a069ac (malloc)
--569-- REDIR: 0x3968a89670 (memcpy) redirected to 0x4a08b60 (memcpy)
--569-- REDIR: 0x3968a81160 (__GI_strlen) redirected to 0x4a07fb0 (__GI_strlen)
==569== Conditional jump or move depends on uninitialised value(s)
==569==    at 0x400D7C: linearNormalization (answer07.c:116)
==569==    by 0x401D5A: main (<stdin>:79)
==569== 
==569== Conditional jump or move depends on uninitialised value(s)
==569==    at 0x400DE8: linearNormalization (answer07.c:124)
==569==    by 0x401D5A: main (<stdin>:79)
==569== 
--569-- REDIR: 0x3968a839a0 (memset) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--569-- REDIR: 0x3968a839e0 (__GI_memset) redirected to 0x4a09a50 (memset)
==569== 
==569== HEAP SUMMARY:
==569==     in use at exit: 0 bytes in 0 blocks
==569==   total heap usage: 8 allocs, 8 frees, 396,959 bytes allocated
==569== 
==569== All heap blocks were freed -- no leaks are possible
==569== 
==569== Use --track-origins=yes to see where uninitialised values come from
==569== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 6 from 6)
==569== 
==569== 1 errors in context 1 of 2:
==569== Conditional jump or move depends on uninitialised value(s)
==569==    at 0x400DE8: linearNormalization (answer07.c:124)
==569==    by 0x401D5A: main (<stdin>:79)
==569== 
==569== 
==569== 1 errors in context 2 of 2:
==569== Conditional jump or move depends on uninitialised value(s)
==569==    at 0x400D7C: linearNormalization (answer07.c:116)
==569==    by 0x401D5A: main (<stdin>:79)
==569== 
--569-- 
--569-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--569-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==569== 
==569== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 6 from 6)
