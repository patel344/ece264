==13679== Memcheck, a memory error detector
==13679== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==13679== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==13679== Command: ./pa08
==13679== Parent PID: 22342
==13679== 
--13679-- 
--13679-- Valgrind options:
--13679--    --tool=memcheck
--13679--    --leak-check=full
--13679--    --verbose
--13679--    --log-file=memcheck.log
--13679-- Contents of /proc/version:
--13679--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--13679-- Arch and hwcaps: AMD64, amd64-sse3-cx16-avx
--13679-- Page sizes: currently 4096, max supported 4096
--13679-- Valgrind library directory: /usr/lib64/valgrind
--13679-- Reading syms from /home/shay/a/patel344/ECE264/solutions/ece264/PA08/pa08
--13679-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--13679--    object doesn't have a dynamic symbol table
--13679-- Reading syms from /lib64/ld-2.12.so
--13679--   Considering /usr/lib/debug/.build-id/3b/fa45bce0e82e1d90d37a0cc8630f97f2003bf5.debug ..
--13679--   .. build-id is valid
--13679-- Scheduler: using generic scheduler lock implementation.
--13679-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==13679== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-13679-by-patel344-on-ecegrid-thin4.ecn.purdue.edu
==13679== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-13679-by-patel344-on-ecegrid-thin4.ecn.purdue.edu
==13679== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-13679-by-patel344-on-ecegrid-thin4.ecn.purdue.edu
==13679== 
==13679== TO CONTROL THIS PROCESS USING vgdb (which you probably
==13679== don't want to do, unless you know exactly what you're doing,
==13679== or are doing some strange experiment):
==13679==   /usr/lib64/valgrind/../../bin/vgdb --pid=13679 ...command...
==13679== 
==13679== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==13679==   /path/to/gdb ./pa08
==13679== and then give GDB the following command
==13679==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=13679
==13679== --pid is optional if only one valgrind process is running
==13679== 
--13679-- REDIR: 0x3350217610 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--13679-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--13679-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--13679-- REDIR: 0x3350217480 (index) redirected to 0x4a07c30 (index)
--13679-- REDIR: 0x3350217500 (strcmp) redirected to 0x4a08570 (strcmp)
--13679-- Reading syms from /lib64/libc-2.12.so
--13679--   Considering /usr/lib/debug/.build-id/73/3ad3a438b5a695f7a63a77413f9b2c8c94e8e6.debug ..
--13679--   .. build-id is valid
--13679-- REDIR: 0x3350684cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--13679-- REDIR: 0x3350686f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--13679-- REDIR: 0x3350682c40 (__GI_strrchr) redirected to 0x4a07ab0 (__GI_strrchr)
==13679== Invalid write of size 8
==13679==    at 0x40064F: main (main.c:14)
==13679==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==13679== 
==13679== 
==13679== Process terminating with default action of signal 11 (SIGSEGV)
==13679==  Access not within mapped region at address 0x0
==13679==    at 0x40064F: main (main.c:14)
==13679==  If you believe this happened as a result of a stack
==13679==  overflow in your program's main thread (unlikely but
==13679==  possible), you can try to increase the size of the
==13679==  main thread stack using the --main-stacksize= flag.
==13679==  The main thread stack size used in this run was 10485760.
--13679-- REDIR: 0x335067b520 (free) redirected to 0x4a063a9 (free)
==13679== 
==13679== HEAP SUMMARY:
==13679==     in use at exit: 0 bytes in 0 blocks
==13679==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==13679== 
==13679== All heap blocks were freed -- no leaks are possible
==13679== 
==13679== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)
==13679== 
==13679== 1 errors in context 1 of 1:
==13679== Invalid write of size 8
==13679==    at 0x40064F: main (main.c:14)
==13679==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==13679== 
--13679-- 
--13679-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--13679-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==13679== 
==13679== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)
